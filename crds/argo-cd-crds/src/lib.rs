// Generated by:
// target/debug/k8s-crds-codegen

pub mod argoproj_io {
    pub mod v1alpha1 {
        pub mod app_project {
            /// AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct AppProject {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub spec: Spec,
                pub status: Status,
            }

            /// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ClusterResourceBlacklistItem {
                pub group: String,
                pub kind: String,
            }

            /// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ClusterResourceWhitelistItem {
                pub group: String,
                pub kind: String,
            }

            /// ApplicationDestination holds information about the application's destination
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Destination {
                /// Name is an alternate way of specifying the target cluster by its symbolic name
                pub name: String,
                /// Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
                pub namespace: String,
                /// Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
                pub server: String,
            }

            /// OrphanedResourceKey is a reference to a resource to be ignored from
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct IgnoreItem {
                pub group: String,
                pub kind: String,
                pub name: String,
            }

            /// JWTToken holds the issuedAt and expiresAt values of a token
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Item {
                pub exp: i64,
                pub iat: i64,
                pub id: String,
            }

            /// JWTToken holds the issuedAt and expiresAt values of a token
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct JwtToken {
                pub exp: i64,
                pub iat: i64,
                pub id: String,
            }

            /// JWTTokensByRole contains a list of JWT tokens issued for a given role
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct JwtTokensByRole {
                /// JWTTokensByRole contains a list of JWT tokens issued for a given role
                pub properties: std::collections::HashMap<String, Value>,
            }

            /// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct NamespaceResourceBlacklistItem {
                pub group: String,
                pub kind: String,
            }

            /// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct NamespaceResourceWhitelistItem {
                pub group: String,
                pub kind: String,
            }

            /// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OrphanedResources {
                /// Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
                pub ignore: Vec<IgnoreItem>,
                /// Warn indicates if warning condition should be created for apps which have orphaned resources
                pub warn: bool,
            }

            /// ProjectRole represents a role that has access to a project
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Role {
                /// Description is a description of the role
                pub description: String,
                /// Groups are a list of OIDC group claims bound to this role
                pub groups: Vec<String>,
                /// JWTTokens are a list of generated JWT tokens bound to this role
                pub jwt_tokens: Vec<JwtToken>,
                /// Name is a name for this role
                pub name: String,
                /// Policies Stores a list of casbin formatted strings that define access policies for the role in the project
                pub policies: Vec<String>,
            }

            /// SignatureKey is the specification of a key required to verify commit signatures with
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SignatureKey {
                /// The ID of the key in hexadecimal notation
                pub key_i_d: String,
            }

            /// AppProjectSpec is the specification of an AppProject
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Spec {
                /// ClusterResourceBlacklist contains list of blacklisted cluster level resources
                pub cluster_resource_blacklist: Vec<ClusterResourceBlacklistItem>,
                /// ClusterResourceWhitelist contains list of whitelisted cluster level resources
                pub cluster_resource_whitelist: Vec<ClusterResourceWhitelistItem>,
                /// Description contains optional project description
                pub description: String,
                /// Destinations contains list of destinations available for deployment
                pub destinations: Vec<Destination>,
                /// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
                pub namespace_resource_blacklist: Vec<NamespaceResourceBlacklistItem>,
                /// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
                pub namespace_resource_whitelist: Vec<NamespaceResourceWhitelistItem>,
                /// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
                pub orphaned_resources: OrphanedResources,
                /// Roles are user defined RBAC roles associated with this project
                pub roles: Vec<Role>,
                /// SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
                pub signature_keys: Vec<SignatureKey>,
                /// SourceRepos contains list of repository URLs which can be used for deployment
                pub source_repos: Vec<String>,
                /// SyncWindows controls when syncs can be run for apps in this project
                pub sync_windows: Vec<SyncWindow>,
            }

            /// AppProjectStatus contains status information for AppProject CRs
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Status {
                /// JWTTokensByRole contains a list of JWT tokens issued for a given role
                pub jwt_tokens_by_role: JwtTokensByRole,
            }

            /// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncWindow {
                /// Applications contains a list of applications that the window will apply to
                pub applications: Vec<String>,
                /// Clusters contains a list of clusters that the window will apply to
                pub clusters: Vec<String>,
                /// Duration is the amount of time the sync window will be open
                pub duration: String,
                /// Kind defines if the window allows or blocks syncs
                pub kind: String,
                /// ManualSync enables manual syncs when they would otherwise be blocked
                pub manual_sync: bool,
                /// Namespaces contains a list of namespaces that the window will apply to
                pub namespaces: Vec<String>,
                /// Schedule is the time the window will begin, specified in cron format
                pub schedule: String,
                /// TimeZone of the sync that will be applied to the schedule
                pub time_zone: String,
            }

            /// JWTTokens represents a list of JWT tokens
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Value {
                pub items: Vec<Item>,
            }

            impl k8s_openapi::Resource for AppProject {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "argoproj.io/v1alpha1";
                const GROUP: &'static str = "argoproj.io";
                const KIND: &'static str = "AppProject";
                const VERSION: &'static str = "v1alpha1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for AppProject {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }
        }
        pub mod application {
            /// Application is a definition of Application resource.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Application {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub operation: Operation,
                pub spec: Spec,
                pub status: Status,
            }

            /// Apply will perform a `kubectl apply` to perform the sync.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSyncStrategyApply {
                /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
                pub force: bool,
            }

            /// Apply will perform a `kubectl apply` to perform the sync.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSyncStrategyApply {
                /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
                pub force: bool,
            }

            /// Automated will keep an application synced to the target revision
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Automated {
                /// AllowEmpty allows apps have zero live resources (default: false)
                pub allow_empty: bool,
                /// Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
                pub prune: bool,
                /// SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
                pub self_heal: bool,
            }

            /// Backoff controls how to backoff on subsequent retries of failed syncs
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationRetryBackoff {
                /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
                pub duration: String,
                /// Factor is a factor to multiply the base duration after each failed retry
                pub factor: i64,
                /// MaxDuration is the maximum amount of time allowed for the backoff strategy
                pub max_duration: String,
            }

            /// Backoff controls how to backoff on subsequent retries of failed syncs
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncPolicyRetryBackoff {
                /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
                pub duration: String,
                /// Factor is a factor to multiply the base duration after each failed retry
                pub factor: i64,
                /// MaxDuration is the maximum amount of time allowed for the backoff strategy
                pub max_duration: String,
            }

            /// Backoff controls how to backoff on subsequent retries of failed syncs
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationRetryBackoff {
                /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
                pub duration: String,
                /// Factor is a factor to multiply the base duration after each failed retry
                pub factor: i64,
                /// MaxDuration is the maximum amount of time allowed for the backoff strategy
                pub max_duration: String,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonAnnotations is a list of additional annotations to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceKustomizeCommonAnnotations {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// CommonLabels is a list of additional labels to add to rendered manifests
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceKustomizeCommonLabels {
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub properties: std::collections::HashMap<String, String>,
            }

            /// ComparedTo contains information about what has been compared
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedTo {
                /// Destination is a reference to the application's destination used for comparison
                pub destination: ComparedToDestination,
                /// Source is a reference to the application's source used for comparison
                pub source: ComparedToSource,
            }

            /// ApplicationCondition contains details about an application condition, which is usally an error or warning
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Condition {
                /// LastTransitionTime is the time the condition was last observed
                pub last_transition_time: String,
                /// Message contains human-readable message indicating details about condition
                pub message: String,
                /// Type is an application condition type
                pub r#type: String,
            }

            /// Destination is a reference to the target Kubernetes server and namespace
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecDestination {
                /// Name is an alternate way of specifying the target cluster by its symbolic name
                pub name: String,
                /// Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
                pub namespace: String,
                /// Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
                pub server: String,
            }

            /// Destination is a reference to the application's destination used for comparison
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToDestination {
                /// Name is an alternate way of specifying the target cluster by its symbolic name
                pub name: String,
                /// Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
                pub namespace: String,
                /// Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
                pub server: String,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: OperationSyncSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: SpecSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: HistoryItemSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: OperationStateOperationSyncSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: SyncResultSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// Directory holds path/directory specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceDirectory {
                /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
                pub exclude: String,
                /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
                pub include: String,
                /// Jsonnet holds options specific to Jsonnet
                pub jsonnet: ComparedToSourceDirectoryJsonnet,
                /// Recurse specifies whether to scan a directory recursively for manifests
                pub recurse: bool,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// EnvEntry represents an entry in the application's environment
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourcePluginEnvItem {
                /// Name is the name of the variable, usually expressed in uppercase
                pub name: String,
                /// Value is the value of the variable
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceHelmFileParameter {
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Path is the path to the file containing the values for the Helm parameter
                pub path: String,
            }

            /// Health contains information about the application's current health status
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct StatusHealth {
                /// Message is a human-readable informational message describing the health status
                pub message: String,
                /// Status holds the status code of the application or resource
                pub status: String,
            }

            /// HealthStatus contains information about the currently observed health state of an application or resource
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ResourceHealth {
                /// Message is a human-readable informational message describing the health status
                pub message: String,
                /// Status holds the status code of the application or resource
                pub status: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<OperationSyncSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<OperationSyncSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<SpecSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<SpecSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<HistoryItemSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<HistoryItemSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<OperationStateOperationSyncSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<OperationStateOperationSyncSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<SyncResultSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<SyncResultSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// Helm holds helm specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceHelm {
                /// FileParameters are file parameters to the helm template
                pub file_parameters: Vec<ComparedToSourceHelmFileParameter>,
                /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
                pub ignore_missing_value_files: bool,
                /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
                pub parameters: Vec<ComparedToSourceHelmParameter>,
                /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
                pub pass_credentials: bool,
                /// ReleaseName is the Helm release name to use. If omitted it will use the application name
                pub release_name: String,
                /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
                pub skip_crds: bool,
                /// ValuesFiles is a list of Helm value files to use when generating a template
                pub value_files: Vec<String>,
                /// Values specifies Helm values to be passed to helm template, typically defined as a block
                pub values: String,
                /// Version is the Helm version to use for templating ("3")
                pub version: String,
            }

            /// RevisionHistory contains history information about a previous sync
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItem {
                /// DeployStartedAt holds the time the sync operation started
                pub deploy_started_at: String,
                /// DeployedAt holds the time the sync operation completed
                pub deployed_at: String,
                /// ID is an auto incrementing identifier of the RevisionHistory
                pub id: i64,
                /// Revision holds the revision the sync was performed against
                pub revision: String,
                /// Source is a reference to the application source used for the sync operation
                pub source: HistoryItemSource,
            }

            /// Hook will submit any referenced resources to perform the sync. This is the default strategy
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSyncStrategyHook {
                /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
                pub force: bool,
            }

            /// Hook will submit any referenced resources to perform the sync. This is the default strategy
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSyncStrategyHook {
                /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
                pub force: bool,
            }

            /// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct IgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                /// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationInfoItem {
                pub name: String,
                pub value: String,
            }

            /// InitiatedBy contains information about who initiated the operations
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationInitiatedBy {
                /// Automated is set to true if operation was initiated automatically by the application controller.
                pub automated: bool,
                /// Username contains the name of a user who started operation
                pub username: String,
            }

            /// InitiatedBy contains information about who initiated the operations
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationInitiatedBy {
                /// Automated is set to true if operation was initiated automatically by the application controller.
                pub automated: bool,
                /// Username contains the name of a user who started operation
                pub username: String,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<OperationSyncSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<OperationSyncSourceDirectoryJsonnetTla>,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<SpecSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<SpecSourceDirectoryJsonnetTla>,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<HistoryItemSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<HistoryItemSourceDirectoryJsonnetTla>,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<OperationStateOperationSyncSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<OperationStateOperationSyncSourceDirectoryJsonnetTla>,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<SyncResultSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<SyncResultSourceDirectoryJsonnetTla>,
            }

            /// Jsonnet holds options specific to Jsonnet
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceDirectoryJsonnet {
                /// ExtVars is a list of Jsonnet External Variables
                pub ext_vars: Vec<ComparedToSourceDirectoryJsonnetExtVar>,
                /// Additional library search dirs
                pub libs: Vec<String>,
                /// TLAS is a list of Jsonnet Top-level Arguments
                pub tlas: Vec<ComparedToSourceDirectoryJsonnetTla>,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: OperationSyncSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: OperationSyncSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: SpecSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: SpecSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: HistoryItemSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: HistoryItemSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: OperationStateOperationSyncSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: OperationStateOperationSyncSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: SyncResultSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: SyncResultSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Kustomize holds kustomize specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceKustomize {
                /// CommonAnnotations is a list of additional annotations to add to rendered manifests
                pub common_annotations: ComparedToSourceKustomizeCommonAnnotations,
                /// CommonLabels is a list of additional labels to add to rendered manifests
                pub common_labels: ComparedToSourceKustomizeCommonLabels,
                /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
                pub force_common_annotations: bool,
                /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
                pub force_common_labels: bool,
                /// Images is a list of Kustomize image override specifications
                pub images: Vec<String>,
                /// NamePrefix is a prefix appended to resources for Kustomize apps
                pub name_prefix: String,
                /// NameSuffix is a suffix appended to resources for Kustomize apps
                pub name_suffix: String,
                /// Version controls which version of Kustomize to use for rendering manifests
                pub version: String,
            }

            /// Operation contains information about a requested or running operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Operation {
                /// Info is a list of informational items for this operation
                pub info: Vec<OperationInfoItem>,
                /// InitiatedBy contains information about who initiated the operations
                pub initiated_by: OperationInitiatedBy,
                /// Retry controls the strategy to apply if a sync fails
                pub retry: OperationRetry,
                /// Sync contains parameters for the operation
                pub sync: OperationSync,
            }

            /// Operation is the original requested operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperation {
                /// Info is a list of informational items for this operation
                pub info: Vec<OperationStateOperationInfoItem>,
                /// InitiatedBy contains information about who initiated the operations
                pub initiated_by: OperationStateOperationInitiatedBy,
                /// Retry controls the strategy to apply if a sync fails
                pub retry: OperationStateOperationRetry,
                /// Sync contains parameters for the operation
                pub sync: OperationStateOperationSync,
            }

            /// OperationState contains information about any ongoing operations, such as a sync
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationState {
                /// FinishedAt contains time of operation completion
                pub finished_at: String,
                /// Message holds any pertinent messages when attempting to perform operation (typically errors).
                pub message: String,
                /// Operation is the original requested operation
                pub operation: OperationStateOperation,
                /// Phase is the current phase of the operation
                pub phase: String,
                /// RetryCount contains time of operation retries
                pub retry_count: i64,
                /// StartedAt contains time of operation start
                pub started_at: String,
                /// SyncResult is the result of a Sync operation
                pub sync_result: SyncResult,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// HelmParameter is a parameter that's passed to helm template during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceHelmParameter {
                /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
                pub force_string: bool,
                /// Name is the name of the Helm parameter
                pub name: String,
                /// Value is the value for the Helm parameter
                pub value: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<OperationSyncSourcePluginEnvItem>,
                pub name: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<SpecSourcePluginEnvItem>,
                pub name: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<HistoryItemSourcePluginEnvItem>,
                pub name: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<OperationStateOperationSyncSourcePluginEnvItem>,
                pub name: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<SyncResultSourcePluginEnvItem>,
                pub name: String,
            }

            /// ConfigManagementPlugin holds config management plugin specific options
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourcePlugin {
                /// Env is a list of environment variable entries
                pub env: Vec<ComparedToSourcePluginEnvItem>,
                pub name: String,
            }

            /// SyncOperationResource contains resources to sync.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncResource {
                pub group: String,
                pub kind: String,
                pub name: String,
                pub namespace: String,
            }

            /// SyncOperationResource contains resources to sync.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncResource {
                pub group: String,
                pub kind: String,
                pub name: String,
                pub namespace: String,
            }

            /// ResourceResult holds the operation result details of a specific resource
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultResource {
                /// Group specifies the API group of the resource
                pub group: String,
                /// HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
                pub hook_phase: String,
                /// HookType specifies the type of the hook. Empty for non-hook resources
                pub hook_type: String,
                /// Kind specifies the API kind of the resource
                pub kind: String,
                /// Message contains an informational or error message for the last sync OR operation
                pub message: String,
                /// Name specifies the name of the resource
                pub name: String,
                /// Namespace specifies the target namespace of the resource
                pub namespace: String,
                /// Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
                pub status: String,
                /// SyncPhase indicates the particular phase of the sync that this result was acquired in
                pub sync_phase: String,
                /// Version specifies the API version of the resource
                pub version: String,
            }

            /// ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct StatusResource {
                pub group: String,
                /// HealthStatus contains information about the currently observed health state of an application or resource
                pub health: ResourceHealth,
                pub hook: bool,
                pub kind: String,
                pub name: String,
                pub namespace: String,
                pub requires_pruning: bool,
                /// SyncStatusCode is a type which represents possible comparison results
                pub status: String,
                pub version: String,
            }

            /// Retry controls the strategy to apply if a sync fails
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationRetry {
                /// Backoff controls how to backoff on subsequent retries of failed syncs
                pub backoff: OperationRetryBackoff,
                /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
                pub limit: i64,
            }

            /// Retry controls failed sync retry behavior
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncPolicyRetry {
                /// Backoff controls how to backoff on subsequent retries of failed syncs
                pub backoff: SyncPolicyRetryBackoff,
                /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
                pub limit: i64,
            }

            /// Retry controls the strategy to apply if a sync fails
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationRetry {
                /// Backoff controls how to backoff on subsequent retries of failed syncs
                pub backoff: OperationStateOperationRetryBackoff,
                /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
                pub limit: i64,
            }

            /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: OperationSyncSourceDirectory,
                /// Helm holds helm specific options
                pub helm: OperationSyncSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: OperationSyncSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: OperationSyncSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// Source is a reference to the location of the application's manifests or chart
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: SpecSourceDirectory,
                /// Helm holds helm specific options
                pub helm: SpecSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: SpecSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: SpecSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// Source is a reference to the application source used for the sync operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: HistoryItemSourceDirectory,
                /// Helm holds helm specific options
                pub helm: HistoryItemSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: HistoryItemSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: HistoryItemSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: OperationStateOperationSyncSourceDirectory,
                /// Helm holds helm specific options
                pub helm: OperationStateOperationSyncSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: OperationStateOperationSyncSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: OperationStateOperationSyncSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// Source records the application source information of the sync, used for comparing auto-sync
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: SyncResultSourceDirectory,
                /// Helm holds helm specific options
                pub helm: SyncResultSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: SyncResultSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: SyncResultSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// Source is a reference to the application's source used for comparison
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSource {
                /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
                pub chart: String,
                /// Directory holds path/directory specific options
                pub directory: ComparedToSourceDirectory,
                /// Helm holds helm specific options
                pub helm: ComparedToSourceHelm,
                /// Kustomize holds kustomize specific options
                pub kustomize: ComparedToSourceKustomize,
                /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
                pub path: String,
                /// ConfigManagementPlugin holds config management plugin specific options
                pub plugin: ComparedToSourcePlugin,
                /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
                pub repo_u_r_l: String,
                /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
                pub target_revision: String,
            }

            /// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Spec {
                /// Destination is a reference to the target Kubernetes server and namespace
                pub destination: SpecDestination,
                /// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
                pub ignore_differences: Vec<IgnoreDifference>,
                /// Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
                pub info: Vec<SpecInfoItem>,
                /// Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
                pub project: String,
                /// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
                pub revision_history_limit: i64,
                /// Source is a reference to the location of the application's manifests or chart
                pub source: SpecSource,
                /// SyncPolicy controls when and how a sync will be performed
                pub sync_policy: SyncPolicy,
            }

            /// ApplicationStatus contains status information for the application
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Status {
                /// Conditions is a list of currently observed application conditions
                pub conditions: Vec<Condition>,
                /// Health contains information about the application's current health status
                pub health: StatusHealth,
                /// History contains information about the application's sync history
                pub history: Vec<HistoryItem>,
                /// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
                pub observed_at: String,
                /// OperationState contains information about any ongoing operations, such as a sync
                pub operation_state: OperationState,
                /// ReconciledAt indicates when the application state was reconciled using the latest git version
                pub reconciled_at: String,
                /// Resources is a list of Kubernetes resources managed by this application
                pub resources: Vec<StatusResource>,
                /// SourceType specifies the type of this application
                pub source_type: String,
                /// Summary contains a list of URLs and container images used by this application
                pub summary: Summary,
                /// Sync contains information about the application's current sync status
                pub sync: StatusSync,
            }

            /// Summary contains a list of URLs and container images used by this application
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Summary {
                /// ExternalURLs holds all external URLs of application child resources.
                pub external_u_r_ls: Vec<String>,
                /// Images holds all images of application child resources.
                pub images: Vec<String>,
            }

            /// Sync contains parameters for the operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSync {
                /// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
                pub dry_run: bool,
                /// Manifests is an optional field that overrides sync source with a local directory for development
                pub manifests: Vec<String>,
                /// Prune specifies to delete resources from the cluster that are no longer tracked in git
                pub prune: bool,
                /// Resources describes which resources shall be part of the sync
                pub resources: Vec<OperationSyncResource>,
                /// Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
                pub revision: String,
                /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
                pub source: OperationSyncSource,
                /// SyncOptions provide per-sync sync-options, e.g. Validate=false
                pub sync_options: Vec<String>,
                /// SyncStrategy describes how to perform the sync
                pub sync_strategy: OperationSyncSyncStrategy,
            }

            /// Sync contains parameters for the operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSync {
                /// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
                pub dry_run: bool,
                /// Manifests is an optional field that overrides sync source with a local directory for development
                pub manifests: Vec<String>,
                /// Prune specifies to delete resources from the cluster that are no longer tracked in git
                pub prune: bool,
                /// Resources describes which resources shall be part of the sync
                pub resources: Vec<OperationStateOperationSyncResource>,
                /// Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
                pub revision: String,
                /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
                pub source: OperationStateOperationSyncSource,
                /// SyncOptions provide per-sync sync-options, e.g. Validate=false
                pub sync_options: Vec<String>,
                /// SyncStrategy describes how to perform the sync
                pub sync_strategy: OperationStateOperationSyncSyncStrategy,
            }

            /// Sync contains information about the application's current sync status
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct StatusSync {
                /// ComparedTo contains information about what has been compared
                pub compared_to: ComparedTo,
                /// Revision contains information about the revision the comparison has been performed to
                pub revision: String,
                /// Status is the sync state of the comparison
                pub status: String,
            }

            /// SyncPolicy controls when and how a sync will be performed
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncPolicy {
                /// Automated will keep an application synced to the target revision
                pub automated: Automated,
                /// Retry controls failed sync retry behavior
                pub retry: SyncPolicyRetry,
                /// Options allow you to specify whole app sync-options
                pub sync_options: Vec<String>,
            }

            /// SyncResult is the result of a Sync operation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResult {
                /// Resources contains a list of sync result items for each individual resource in a sync operation
                pub resources: Vec<SyncResultResource>,
                /// Revision holds the revision this sync operation was performed to
                pub revision: String,
                /// Source records the application source information of the sync, used for comparing auto-sync
                pub source: SyncResultSource,
            }

            /// SyncStrategy describes how to perform the sync
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSyncStrategy {
                /// Apply will perform a `kubectl apply` to perform the sync.
                pub apply: OperationSyncSyncStrategyApply,
                /// Hook will submit any referenced resources to perform the sync. This is the default strategy
                pub hook: OperationSyncSyncStrategyHook,
            }

            /// SyncStrategy describes how to perform the sync
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSyncStrategy {
                /// Apply will perform a `kubectl apply` to perform the sync.
                pub apply: OperationStateOperationSyncSyncStrategyApply,
                /// Hook will submit any referenced resources to perform the sync. This is the default strategy
                pub hook: OperationStateOperationSyncSyncStrategyHook,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationSyncSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct HistoryItemSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct OperationStateOperationSyncSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SyncResultSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            /// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ComparedToSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            impl k8s_openapi::Resource for Application {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "argoproj.io/v1alpha1";
                const GROUP: &'static str = "argoproj.io";
                const KIND: &'static str = "Application";
                const VERSION: &'static str = "v1alpha1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for Application {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }
        }
        pub mod application_set {
            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct ApplicationSet {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub spec: Spec,
                pub status: Status,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderAzureDevOpsAccessTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderAzureDevOpsAccessTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderAzureDevOpsAccessTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateMetadataAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderBitbucketAppPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderBitbucketAppPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderBitbucketAppPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSyncPolicyAutomated {
                pub allow_empty: bool,
                pub prune: bool,
                pub self_heal: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderAzureDevOps {
                pub access_token_ref: MatrixGeneratorScmProviderAzureDevOpsAccessTokenRef,
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub team_project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderAzureDevOps {
                pub access_token_ref: MergeGeneratorScmProviderAzureDevOpsAccessTokenRef,
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub team_project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderAzureDevOps {
                pub access_token_ref: SpecGeneratorScmProviderAzureDevOpsAccessTokenRef,
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub team_project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSyncPolicyRetryBackoff {
                pub duration: String,
                pub factor: i64,
                pub max_duration: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestBitbucketServerBasicAuth {
                pub password_ref: MatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderBitbucketServerBasicAuth {
                pub password_ref: MatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestBitbucketServerBasicAuth {
                pub password_ref: MergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderBitbucketServerBasicAuth {
                pub password_ref: MergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestBitbucketServerBasicAuth {
                pub password_ref: SpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderBitbucketServerBasicAuth {
                pub password_ref: SpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef,
                pub username: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderBitbucket {
                pub all_branches: bool,
                pub app_password_ref: MatrixGeneratorScmProviderBitbucketAppPasswordRef,
                pub owner: String,
                pub user: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderBitbucket {
                pub all_branches: bool,
                pub app_password_ref: MergeGeneratorScmProviderBitbucketAppPasswordRef,
                pub owner: String,
                pub user: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderBitbucket {
                pub all_branches: bool,
                pub app_password_ref: SpecGeneratorScmProviderBitbucketAppPasswordRef,
                pub owner: String,
                pub user: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestBitbucketServer {
                pub api: String,
                pub basic_auth: MatrixGeneratorPullRequestBitbucketServerBasicAuth,
                pub project: String,
                pub repo: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderBitbucketServer {
                pub all_branches: bool,
                pub api: String,
                pub basic_auth: MatrixGeneratorScmProviderBitbucketServerBasicAuth,
                pub project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestBitbucketServer {
                pub api: String,
                pub basic_auth: MergeGeneratorPullRequestBitbucketServerBasicAuth,
                pub project: String,
                pub repo: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderBitbucketServer {
                pub all_branches: bool,
                pub api: String,
                pub basic_auth: MergeGeneratorScmProviderBitbucketServerBasicAuth,
                pub project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestBitbucketServer {
                pub api: String,
                pub basic_auth: SpecGeneratorPullRequestBitbucketServerBasicAuth,
                pub project: String,
                pub repo: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderBitbucketServer {
                pub all_branches: bool,
                pub api: String,
                pub basic_auth: SpecGeneratorScmProviderBitbucketServerBasicAuth,
                pub project: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResource {
                pub config_map_ref: String,
                pub label_selector: SpecGeneratorClusterDecisionResourceLabelSelector,
                pub name: String,
                pub requeue_after_seconds: i64,
                pub template: SpecGeneratorClusterDecisionResourceTemplate,
                pub values: SpecGeneratorClusterDecisionResourceValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResource {
                pub config_map_ref: String,
                pub label_selector: MatrixGeneratorClusterDecisionResourceLabelSelector,
                pub name: String,
                pub requeue_after_seconds: i64,
                pub template: MatrixGeneratorClusterDecisionResourceTemplate,
                pub values: MatrixGeneratorClusterDecisionResourceValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResource {
                pub config_map_ref: String,
                pub label_selector: MergeGeneratorClusterDecisionResourceLabelSelector,
                pub name: String,
                pub requeue_after_seconds: i64,
                pub template: MergeGeneratorClusterDecisionResourceTemplate,
                pub values: MergeGeneratorClusterDecisionResourceValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusters {
                pub selector: SpecGeneratorClustersSelector,
                pub template: SpecGeneratorClustersTemplate,
                pub values: SpecGeneratorClustersValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusters {
                pub selector: MatrixGeneratorClustersSelector,
                pub template: MatrixGeneratorClustersTemplate,
                pub values: MatrixGeneratorClustersValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusters {
                pub selector: MergeGeneratorClustersSelector,
                pub template: MergeGeneratorClustersTemplate,
                pub values: MergeGeneratorClustersValues,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceKustomizeCommonAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceKustomizeCommonLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Condition {
                pub last_transition_time: String,
                pub message: String,
                pub reason: String,
                pub status: String,
                pub r#type: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecDestination {
                pub name: String,
                pub namespace: String,
                pub server: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitDirectorie {
                pub exclude: bool,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitDirectorie {
                pub exclude: bool,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitDirectorie {
                pub exclude: bool,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorGitTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorListTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet:
                    MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixGeneratorListTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MatrixTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet:
                    MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeGeneratorGitTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeGeneratorListTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: MergeTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceDirectory {
                pub exclude: String,
                pub include: String,
                pub jsonnet: SpecTemplateSpecSourceDirectoryJsonnet,
                pub recurse: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourcePluginEnvItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceDirectoryJsonnetExtVar {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitFile {
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitFile {
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitFile {
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceHelmFileParameter {
                pub name: String,
                pub path: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestFilter {
                pub branch_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderFilter {
                pub branch_match: String,
                pub label_match: String,
                pub paths_do_not_exist: Vec<String>,
                pub paths_exist: Vec<String>,
                pub repository_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestFilter {
                pub branch_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderFilter {
                pub branch_match: String,
                pub label_match: String,
                pub paths_do_not_exist: Vec<String>,
                pub paths_exist: Vec<String>,
                pub repository_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestFilter {
                pub branch_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderFilter {
                pub branch_match: String,
                pub label_match: String,
                pub paths_do_not_exist: Vec<String>,
                pub paths_exist: Vec<String>,
                pub repository_match: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGenerator {
                pub cluster_decision_resource: SpecGeneratorClusterDecisionResource,
                pub clusters: SpecGeneratorClusters,
                pub git: SpecGeneratorGit,
                pub list: SpecGeneratorList,
                pub matrix: Matrix,
                pub merge: Merge,
                pub pull_request: SpecGeneratorPullRequest,
                pub scm_provider: SpecGeneratorScmProvider,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGenerator {
                pub cluster_decision_resource: MatrixGeneratorClusterDecisionResource,
                pub clusters: MatrixGeneratorClusters,
                pub git: MatrixGeneratorGit,
                pub list: MatrixGeneratorList,
                pub matrix: std::collections::HashMap<String, String>,
                pub merge: std::collections::HashMap<String, String>,
                pub pull_request: MatrixGeneratorPullRequest,
                pub scm_provider: MatrixGeneratorScmProvider,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGenerator {
                pub cluster_decision_resource: MergeGeneratorClusterDecisionResource,
                pub clusters: MergeGeneratorClusters,
                pub git: MergeGeneratorGit,
                pub list: MergeGeneratorList,
                pub matrix: std::collections::HashMap<String, String>,
                pub merge: std::collections::HashMap<String, String>,
                pub pull_request: MergeGeneratorPullRequest,
                pub scm_provider: MergeGeneratorScmProvider,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGit {
                pub directories: Vec<SpecGeneratorGitDirectorie>,
                pub files: Vec<SpecGeneratorGitFile>,
                pub repo_u_r_l: String,
                pub requeue_after_seconds: i64,
                pub revision: String,
                pub template: SpecGeneratorGitTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGit {
                pub directories: Vec<MatrixGeneratorGitDirectorie>,
                pub files: Vec<MatrixGeneratorGitFile>,
                pub repo_u_r_l: String,
                pub requeue_after_seconds: i64,
                pub revision: String,
                pub template: MatrixGeneratorGitTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGit {
                pub directories: Vec<MergeGeneratorGitDirectorie>,
                pub files: Vec<MergeGeneratorGitFile>,
                pub repo_u_r_l: String,
                pub requeue_after_seconds: i64,
                pub revision: String,
                pub template: MergeGeneratorGitTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGitea {
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub repo: String,
                pub token_ref: MatrixGeneratorPullRequestGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGitea {
                pub all_branches: bool,
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub token_ref: MatrixGeneratorScmProviderGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGitea {
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub repo: String,
                pub token_ref: MergeGeneratorPullRequestGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGitea {
                pub all_branches: bool,
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub token_ref: MergeGeneratorScmProviderGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGitea {
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub repo: String,
                pub token_ref: SpecGeneratorPullRequestGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGitea {
                pub all_branches: bool,
                pub api: String,
                pub insecure: bool,
                pub owner: String,
                pub token_ref: SpecGeneratorScmProviderGiteaTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGithub {
                pub api: String,
                pub labels: Vec<String>,
                pub owner: String,
                pub repo: String,
                pub token_ref: MatrixGeneratorPullRequestGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGithub {
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub token_ref: MatrixGeneratorScmProviderGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGithub {
                pub api: String,
                pub labels: Vec<String>,
                pub owner: String,
                pub repo: String,
                pub token_ref: MergeGeneratorPullRequestGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGithub {
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub token_ref: MergeGeneratorScmProviderGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGithub {
                pub api: String,
                pub labels: Vec<String>,
                pub owner: String,
                pub repo: String,
                pub token_ref: SpecGeneratorPullRequestGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGithub {
                pub all_branches: bool,
                pub api: String,
                pub organization: String,
                pub token_ref: SpecGeneratorScmProviderGithubTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGitlab {
                pub api: String,
                pub labels: Vec<String>,
                pub project: String,
                pub pull_request_state: String,
                pub token_ref: MatrixGeneratorPullRequestGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGitlab {
                pub all_branches: bool,
                pub api: String,
                pub group: String,
                pub include_subgroups: bool,
                pub token_ref: MatrixGeneratorScmProviderGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGitlab {
                pub api: String,
                pub labels: Vec<String>,
                pub project: String,
                pub pull_request_state: String,
                pub token_ref: MergeGeneratorPullRequestGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGitlab {
                pub all_branches: bool,
                pub api: String,
                pub group: String,
                pub include_subgroups: bool,
                pub token_ref: MergeGeneratorScmProviderGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGitlab {
                pub api: String,
                pub labels: Vec<String>,
                pub project: String,
                pub pull_request_state: String,
                pub token_ref: SpecGeneratorPullRequestGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGitlab {
                pub all_branches: bool,
                pub api: String,
                pub group: String,
                pub include_subgroups: bool,
                pub token_ref: SpecGeneratorScmProviderGitlabTokenRef,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters:
                    Vec<SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceHelm {
                pub file_parameters: Vec<SpecGeneratorClustersTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecGeneratorClustersTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceHelm {
                pub file_parameters: Vec<SpecGeneratorGitTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecGeneratorGitTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceHelm {
                pub file_parameters: Vec<SpecGeneratorListTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecGeneratorListTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters:
                    Vec<MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MatrixGeneratorClustersTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixGeneratorClustersTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceHelm {
                pub file_parameters: Vec<MatrixGeneratorGitTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixGeneratorGitTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceHelm {
                pub file_parameters: Vec<MatrixGeneratorListTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixGeneratorListTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixGeneratorPullRequestTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixGeneratorScmProviderTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceHelm {
                pub file_parameters: Vec<MatrixTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MatrixTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters:
                    Vec<MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceHelm {
                pub file_parameters: Vec<MergeGeneratorClustersTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeGeneratorClustersTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceHelm {
                pub file_parameters: Vec<MergeGeneratorGitTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeGeneratorGitTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceHelm {
                pub file_parameters: Vec<MergeGeneratorListTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeGeneratorListTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeGeneratorPullRequestTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<MergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeGeneratorScmProviderTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceHelm {
                pub file_parameters: Vec<MergeTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<MergeTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<SpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecGeneratorPullRequestTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceHelm {
                pub file_parameters:
                    Vec<SpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecGeneratorScmProviderTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceHelm {
                pub file_parameters: Vec<SpecTemplateSpecSourceHelmFileParameter>,
                pub ignore_missing_value_files: bool,
                pub parameters: Vec<SpecTemplateSpecSourceHelmParameter>,
                pub pass_credentials: bool,
                pub release_name: String,
                pub skip_crds: bool,
                pub value_files: Vec<String>,
                pub values: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecIgnoreDifference {
                pub group: String,
                pub jq_path_expressions: Vec<String>,
                pub json_pointers: Vec<String>,
                pub kind: String,
                pub managed_fields_managers: Vec<String>,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecInfoItem {
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<
                    SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar,
                >,
                pub libs: Vec<String>,
                pub tlas:
                    Vec<SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<
                    MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar,
                >,
                pub libs: Vec<String>,
                pub tlas: Vec<
                    MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla,
                >,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars:
                    Vec<MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars:
                    Vec<MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MatrixTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MatrixTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<
                    MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar,
                >,
                pub libs: Vec<String>,
                pub tlas:
                    Vec<MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars:
                    Vec<MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars:
                    Vec<MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<MergeTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<MergeTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceDirectoryJsonnet {
                pub ext_vars: Vec<SpecTemplateSpecSourceDirectoryJsonnetExtVar>,
                pub libs: Vec<String>,
                pub tlas: Vec<SpecTemplateSpecSourceDirectoryJsonnetTla>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
            pub common_annotations: SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations,
            pub common_labels: SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels,
            pub force_common_annotations: bool,
            pub force_common_labels: bool,
            pub images: Vec<String>,
            pub name_prefix: String,
            pub name_suffix: String,
            pub version: String,
        }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceKustomize {
                pub common_annotations:
                    SpecGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecGeneratorClustersTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceKustomize {
                pub common_annotations:
                    SpecGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecGeneratorGitTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceKustomize {
                pub common_annotations:
                    SpecGeneratorListTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecGeneratorListTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
            pub common_annotations: MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations,
            pub common_labels: MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels,
            pub force_common_annotations: bool,
            pub force_common_labels: bool,
            pub images: Vec<String>,
            pub name_prefix: String,
            pub name_suffix: String,
            pub version: String,
        }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceKustomize {
                pub common_annotations:
                    MatrixGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MatrixGeneratorClustersTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceKustomize {
                pub common_annotations:
                    MatrixGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MatrixGeneratorGitTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceKustomize {
                pub common_annotations:
                    MatrixGeneratorListTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MatrixGeneratorListTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceKustomize {
                pub common_annotations:
                    MatrixGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels:
                    MatrixGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceKustomize {
                pub common_annotations:
                    MatrixGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels:
                    MatrixGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceKustomize {
                pub common_annotations: MatrixTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MatrixTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
            pub common_annotations: MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonAnnotations,
            pub common_labels: MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeCommonLabels,
            pub force_common_annotations: bool,
            pub force_common_labels: bool,
            pub images: Vec<String>,
            pub name_prefix: String,
            pub name_suffix: String,
            pub version: String,
        }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceKustomize {
                pub common_annotations:
                    MergeGeneratorClustersTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeGeneratorClustersTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceKustomize {
                pub common_annotations:
                    MergeGeneratorGitTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeGeneratorGitTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceKustomize {
                pub common_annotations:
                    MergeGeneratorListTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeGeneratorListTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceKustomize {
                pub common_annotations:
                    MergeGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceKustomize {
                pub common_annotations:
                    MergeGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceKustomize {
                pub common_annotations: MergeTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: MergeTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceKustomize {
                pub common_annotations:
                    SpecGeneratorPullRequestTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecGeneratorPullRequestTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceKustomize {
                pub common_annotations:
                    SpecGeneratorScmProviderTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecGeneratorScmProviderTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceKustomize {
                pub common_annotations: SpecTemplateSpecSourceKustomizeCommonAnnotations,
                pub common_labels: SpecTemplateSpecSourceKustomizeCommonLabels,
                pub force_common_annotations: bool,
                pub force_common_labels: bool,
                pub images: Vec<String>,
                pub name_prefix: String,
                pub name_suffix: String,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceLabelSelector {
                pub match_expressions:
                    Vec<SpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression>,
                pub match_labels: SpecGeneratorClusterDecisionResourceLabelSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceLabelSelector {
                pub match_expressions:
                    Vec<MatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression>,
                pub match_labels: MatrixGeneratorClusterDecisionResourceLabelSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceLabelSelector {
                pub match_expressions:
                    Vec<MergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression>,
                pub match_labels: MergeGeneratorClusterDecisionResourceLabelSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateMetadataLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorList {
                pub elements: Vec<std::collections::HashMap<String, String>>,
                pub template: SpecGeneratorListTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorList {
                pub elements: Vec<std::collections::HashMap<String, String>>,
                pub template: MatrixGeneratorListTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorList {
                pub elements: Vec<std::collections::HashMap<String, String>>,
                pub template: MergeGeneratorListTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersSelectorMatchExpression {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceLabelSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceLabelSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceLabelSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersSelectorMatchLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Matrix {
                pub generators: Vec<MatrixGenerator>,
                pub template: MatrixTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Merge {
                pub generators: Vec<MergeGenerator>,
                pub merge_keys: Vec<String>,
                pub template: MergeTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateMetadata {
                pub annotations: SpecGeneratorClusterDecisionResourceTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorClusterDecisionResourceTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateMetadata {
                pub annotations: SpecGeneratorClustersTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorClustersTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateMetadata {
                pub annotations: SpecGeneratorGitTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorGitTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateMetadata {
                pub annotations: SpecGeneratorListTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorListTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateMetadata {
                pub annotations: MatrixGeneratorClusterDecisionResourceTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorClusterDecisionResourceTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateMetadata {
                pub annotations: MatrixGeneratorClustersTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorClustersTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateMetadata {
                pub annotations: MatrixGeneratorGitTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorGitTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateMetadata {
                pub annotations: MatrixGeneratorListTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorListTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateMetadata {
                pub annotations: MatrixGeneratorPullRequestTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorPullRequestTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateMetadata {
                pub annotations: MatrixGeneratorScmProviderTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixGeneratorScmProviderTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateMetadata {
                pub annotations: MatrixTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MatrixTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateMetadata {
                pub annotations: MergeGeneratorClusterDecisionResourceTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorClusterDecisionResourceTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateMetadata {
                pub annotations: MergeGeneratorClustersTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorClustersTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateMetadata {
                pub annotations: MergeGeneratorGitTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorGitTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateMetadata {
                pub annotations: MergeGeneratorListTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorListTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateMetadata {
                pub annotations: MergeGeneratorPullRequestTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorPullRequestTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateMetadata {
                pub annotations: MergeGeneratorScmProviderTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeGeneratorScmProviderTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateMetadata {
                pub annotations: MergeTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: MergeTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateMetadata {
                pub annotations: SpecGeneratorPullRequestTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorPullRequestTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateMetadata {
                pub annotations: SpecGeneratorScmProviderTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecGeneratorScmProviderTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateMetadata {
                pub annotations: SpecTemplateMetadataAnnotations,
                pub finalizers: Vec<String>,
                pub labels: SpecTemplateMetadataLabels,
                pub name: String,
                pub namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceHelmParameter {
                pub force_string: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorClustersTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorGitTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorListTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorClustersTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorGitTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorListTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorPullRequestTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourcePlugin {
                pub env: Vec<MatrixGeneratorScmProviderTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourcePlugin {
                pub env: Vec<MatrixTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorClustersTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorGitTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorListTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorPullRequestTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourcePlugin {
                pub env: Vec<MergeGeneratorScmProviderTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourcePlugin {
                pub env: Vec<MergeTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorPullRequestTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourcePlugin {
                pub env: Vec<SpecGeneratorScmProviderTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourcePlugin {
                pub env: Vec<SpecTemplateSpecSourcePluginEnvItem>,
                pub name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequest {
                pub bitbucket_server: MatrixGeneratorPullRequestBitbucketServer,
                pub filters: Vec<MatrixGeneratorPullRequestFilter>,
                pub gitea: MatrixGeneratorPullRequestGitea,
                pub github: MatrixGeneratorPullRequestGithub,
                pub gitlab: MatrixGeneratorPullRequestGitlab,
                pub requeue_after_seconds: i64,
                pub template: MatrixGeneratorPullRequestTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequest {
                pub bitbucket_server: MergeGeneratorPullRequestBitbucketServer,
                pub filters: Vec<MergeGeneratorPullRequestFilter>,
                pub gitea: MergeGeneratorPullRequestGitea,
                pub github: MergeGeneratorPullRequestGithub,
                pub gitlab: MergeGeneratorPullRequestGitlab,
                pub requeue_after_seconds: i64,
                pub template: MergeGeneratorPullRequestTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequest {
                pub bitbucket_server: SpecGeneratorPullRequestBitbucketServer,
                pub filters: Vec<SpecGeneratorPullRequestFilter>,
                pub gitea: SpecGeneratorPullRequestGitea,
                pub github: SpecGeneratorPullRequestGithub,
                pub gitlab: SpecGeneratorPullRequestGitlab,
                pub requeue_after_seconds: i64,
                pub template: SpecGeneratorPullRequestTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorListTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
                pub backoff:
                    MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixGeneratorClustersTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSyncPolicyRetry {
                pub backoff: MatrixTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
                pub backoff:
                    MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSyncPolicyRetry {
                pub backoff: MergeGeneratorClustersTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSyncPolicyRetry {
                pub backoff: MergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSyncPolicyRetry {
                pub backoff: MergeGeneratorListTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSyncPolicyRetry {
                pub backoff: MergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSyncPolicyRetry {
                pub backoff: MergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSyncPolicyRetry {
                pub backoff: MergeTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSyncPolicyRetry {
                pub backoff: SpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSyncPolicyRetry {
                pub backoff: SpecTemplateSpecSyncPolicyRetryBackoff,
                pub limit: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProvider {
                pub azure_dev_ops: MatrixGeneratorScmProviderAzureDevOps,
                pub bitbucket: MatrixGeneratorScmProviderBitbucket,
                pub bitbucket_server: MatrixGeneratorScmProviderBitbucketServer,
                pub clone_protocol: String,
                pub filters: Vec<MatrixGeneratorScmProviderFilter>,
                pub gitea: MatrixGeneratorScmProviderGitea,
                pub github: MatrixGeneratorScmProviderGithub,
                pub gitlab: MatrixGeneratorScmProviderGitlab,
                pub requeue_after_seconds: i64,
                pub template: MatrixGeneratorScmProviderTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProvider {
                pub azure_dev_ops: MergeGeneratorScmProviderAzureDevOps,
                pub bitbucket: MergeGeneratorScmProviderBitbucket,
                pub bitbucket_server: MergeGeneratorScmProviderBitbucketServer,
                pub clone_protocol: String,
                pub filters: Vec<MergeGeneratorScmProviderFilter>,
                pub gitea: MergeGeneratorScmProviderGitea,
                pub github: MergeGeneratorScmProviderGithub,
                pub gitlab: MergeGeneratorScmProviderGitlab,
                pub requeue_after_seconds: i64,
                pub template: MergeGeneratorScmProviderTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProvider {
                pub azure_dev_ops: SpecGeneratorScmProviderAzureDevOps,
                pub bitbucket: SpecGeneratorScmProviderBitbucket,
                pub bitbucket_server: SpecGeneratorScmProviderBitbucketServer,
                pub clone_protocol: String,
                pub filters: Vec<SpecGeneratorScmProviderFilter>,
                pub gitea: SpecGeneratorScmProviderGitea,
                pub github: SpecGeneratorScmProviderGithub,
                pub gitlab: SpecGeneratorScmProviderGitlab,
                pub requeue_after_seconds: i64,
                pub template: SpecGeneratorScmProviderTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersSelector {
                pub match_expressions: Vec<SpecGeneratorClustersSelectorMatchExpression>,
                pub match_labels: SpecGeneratorClustersSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersSelector {
                pub match_expressions: Vec<MatrixGeneratorClustersSelectorMatchExpression>,
                pub match_labels: MatrixGeneratorClustersSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersSelector {
                pub match_expressions: Vec<MergeGeneratorClustersSelectorMatchExpression>,
                pub match_labels: MergeGeneratorClustersSelectorMatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorClustersTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorClustersTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorClustersTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorClustersTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorGitTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorGitTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorGitTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorGitTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorListTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorListTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorListTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorListTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorClustersTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorClustersTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorClustersTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorClustersTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorGitTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorGitTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorGitTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorGitTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorListTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorListTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorListTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorListTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorPullRequestTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorPullRequestTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorPullRequestTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorPullRequestTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixGeneratorScmProviderTemplateSpecSourceDirectory,
                pub helm: MatrixGeneratorScmProviderTemplateSpecSourceHelm,
                pub kustomize: MatrixGeneratorScmProviderTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixGeneratorScmProviderTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSource {
                pub chart: String,
                pub directory: MatrixTemplateSpecSourceDirectory,
                pub helm: MatrixTemplateSpecSourceHelm,
                pub kustomize: MatrixTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MatrixTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorClustersTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorClustersTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorClustersTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorClustersTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorGitTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorGitTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorGitTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorGitTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorListTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorListTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorListTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorListTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorPullRequestTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorPullRequestTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorPullRequestTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorPullRequestTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSource {
                pub chart: String,
                pub directory: MergeGeneratorScmProviderTemplateSpecSourceDirectory,
                pub helm: MergeGeneratorScmProviderTemplateSpecSourceHelm,
                pub kustomize: MergeGeneratorScmProviderTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeGeneratorScmProviderTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSource {
                pub chart: String,
                pub directory: MergeTemplateSpecSourceDirectory,
                pub helm: MergeTemplateSpecSourceHelm,
                pub kustomize: MergeTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: MergeTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorPullRequestTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorPullRequestTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorPullRequestTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorPullRequestTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSource {
                pub chart: String,
                pub directory: SpecGeneratorScmProviderTemplateSpecSourceDirectory,
                pub helm: SpecGeneratorScmProviderTemplateSpecSourceHelm,
                pub kustomize: SpecGeneratorScmProviderTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecGeneratorScmProviderTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSource {
                pub chart: String,
                pub directory: SpecTemplateSpecSourceDirectory,
                pub helm: SpecTemplateSpecSourceHelm,
                pub kustomize: SpecTemplateSpecSourceKustomize,
                pub path: String,
                pub plugin: SpecTemplateSpecSourcePlugin,
                pub repo_u_r_l: String,
                pub target_revision: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Spec {
                pub generators: Vec<SpecGenerator>,
                pub sync_policy: SpecSyncPolicy,
                pub template: SpecTemplate,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpec {
                pub destination: SpecGeneratorClusterDecisionResourceTemplateSpecDestination,
                pub ignore_differences:
                    Vec<SpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorClusterDecisionResourceTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorClusterDecisionResourceTemplateSpecSource,
                pub sync_policy: SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpec {
                pub destination: SpecGeneratorClustersTemplateSpecDestination,
                pub ignore_differences: Vec<SpecGeneratorClustersTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorClustersTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorClustersTemplateSpecSource,
                pub sync_policy: SpecGeneratorClustersTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpec {
                pub destination: SpecGeneratorGitTemplateSpecDestination,
                pub ignore_differences: Vec<SpecGeneratorGitTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorGitTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorGitTemplateSpecSource,
                pub sync_policy: SpecGeneratorGitTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpec {
                pub destination: SpecGeneratorListTemplateSpecDestination,
                pub ignore_differences: Vec<SpecGeneratorListTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorListTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorListTemplateSpecSource,
                pub sync_policy: SpecGeneratorListTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpec {
                pub destination: MatrixGeneratorClusterDecisionResourceTemplateSpecDestination,
                pub ignore_differences:
                    Vec<MatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorClusterDecisionResourceTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorClusterDecisionResourceTemplateSpecSource,
                pub sync_policy: MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpec {
                pub destination: MatrixGeneratorClustersTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixGeneratorClustersTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorClustersTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorClustersTemplateSpecSource,
                pub sync_policy: MatrixGeneratorClustersTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpec {
                pub destination: MatrixGeneratorGitTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixGeneratorGitTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorGitTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorGitTemplateSpecSource,
                pub sync_policy: MatrixGeneratorGitTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpec {
                pub destination: MatrixGeneratorListTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixGeneratorListTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorListTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorListTemplateSpecSource,
                pub sync_policy: MatrixGeneratorListTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpec {
                pub destination: MatrixGeneratorPullRequestTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixGeneratorPullRequestTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorPullRequestTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorPullRequestTemplateSpecSource,
                pub sync_policy: MatrixGeneratorPullRequestTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpec {
                pub destination: MatrixGeneratorScmProviderTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixGeneratorScmProviderTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixGeneratorScmProviderTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixGeneratorScmProviderTemplateSpecSource,
                pub sync_policy: MatrixGeneratorScmProviderTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpec {
                pub destination: MatrixTemplateSpecDestination,
                pub ignore_differences: Vec<MatrixTemplateSpecIgnoreDifference>,
                pub info: Vec<MatrixTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MatrixTemplateSpecSource,
                pub sync_policy: MatrixTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpec {
                pub destination: MergeGeneratorClusterDecisionResourceTemplateSpecDestination,
                pub ignore_differences:
                    Vec<MergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorClusterDecisionResourceTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorClusterDecisionResourceTemplateSpecSource,
                pub sync_policy: MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpec {
                pub destination: MergeGeneratorClustersTemplateSpecDestination,
                pub ignore_differences: Vec<MergeGeneratorClustersTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorClustersTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorClustersTemplateSpecSource,
                pub sync_policy: MergeGeneratorClustersTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpec {
                pub destination: MergeGeneratorGitTemplateSpecDestination,
                pub ignore_differences: Vec<MergeGeneratorGitTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorGitTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorGitTemplateSpecSource,
                pub sync_policy: MergeGeneratorGitTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpec {
                pub destination: MergeGeneratorListTemplateSpecDestination,
                pub ignore_differences: Vec<MergeGeneratorListTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorListTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorListTemplateSpecSource,
                pub sync_policy: MergeGeneratorListTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpec {
                pub destination: MergeGeneratorPullRequestTemplateSpecDestination,
                pub ignore_differences: Vec<MergeGeneratorPullRequestTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorPullRequestTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorPullRequestTemplateSpecSource,
                pub sync_policy: MergeGeneratorPullRequestTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpec {
                pub destination: MergeGeneratorScmProviderTemplateSpecDestination,
                pub ignore_differences: Vec<MergeGeneratorScmProviderTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeGeneratorScmProviderTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeGeneratorScmProviderTemplateSpecSource,
                pub sync_policy: MergeGeneratorScmProviderTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpec {
                pub destination: MergeTemplateSpecDestination,
                pub ignore_differences: Vec<MergeTemplateSpecIgnoreDifference>,
                pub info: Vec<MergeTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: MergeTemplateSpecSource,
                pub sync_policy: MergeTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpec {
                pub destination: SpecGeneratorPullRequestTemplateSpecDestination,
                pub ignore_differences: Vec<SpecGeneratorPullRequestTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorPullRequestTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorPullRequestTemplateSpecSource,
                pub sync_policy: SpecGeneratorPullRequestTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpec {
                pub destination: SpecGeneratorScmProviderTemplateSpecDestination,
                pub ignore_differences: Vec<SpecGeneratorScmProviderTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecGeneratorScmProviderTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecGeneratorScmProviderTemplateSpecSource,
                pub sync_policy: SpecGeneratorScmProviderTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpec {
                pub destination: SpecTemplateSpecDestination,
                pub ignore_differences: Vec<SpecTemplateSpecIgnoreDifference>,
                pub info: Vec<SpecTemplateSpecInfoItem>,
                pub project: String,
                pub revision_history_limit: i64,
                pub source: SpecTemplateSpecSource,
                pub sync_policy: SpecTemplateSpecSyncPolicy,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct Status {
                pub conditions: Vec<Condition>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorClustersTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorClustersTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorGitTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorGitTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorListTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorListTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
                pub automated:
                    MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSyncPolicy {
                pub automated: MatrixGeneratorClustersTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorClustersTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSyncPolicy {
                pub automated: MatrixGeneratorGitTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorGitTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSyncPolicy {
                pub automated: MatrixGeneratorListTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorListTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSyncPolicy {
                pub automated: MatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSyncPolicy {
                pub automated: MatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSyncPolicy {
                pub automated: MatrixTemplateSpecSyncPolicyAutomated,
                pub retry: MatrixTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorClustersTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorClustersTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorGitTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorGitTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorListTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorListTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorPullRequestTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSyncPolicy {
                pub automated: MergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated,
                pub retry: MergeGeneratorScmProviderTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSyncPolicy {
                pub automated: MergeTemplateSpecSyncPolicyAutomated,
                pub retry: MergeTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorPullRequestTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSyncPolicy {
                pub automated: SpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated,
                pub retry: SpecGeneratorScmProviderTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecSyncPolicy {
                pub preserve_resources_on_deletion: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSyncPolicy {
                pub automated: SpecTemplateSpecSyncPolicyAutomated,
                pub retry: SpecTemplateSpecSyncPolicyRetry,
                pub sync_options: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplate {
                pub metadata: SpecGeneratorClusterDecisionResourceTemplateMetadata,
                pub spec: SpecGeneratorClusterDecisionResourceTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplate {
                pub metadata: SpecGeneratorClustersTemplateMetadata,
                pub spec: SpecGeneratorClustersTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplate {
                pub metadata: SpecGeneratorGitTemplateMetadata,
                pub spec: SpecGeneratorGitTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplate {
                pub metadata: SpecGeneratorListTemplateMetadata,
                pub spec: SpecGeneratorListTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplate {
                pub metadata: MatrixGeneratorClusterDecisionResourceTemplateMetadata,
                pub spec: MatrixGeneratorClusterDecisionResourceTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplate {
                pub metadata: MatrixGeneratorClustersTemplateMetadata,
                pub spec: MatrixGeneratorClustersTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplate {
                pub metadata: MatrixGeneratorGitTemplateMetadata,
                pub spec: MatrixGeneratorGitTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplate {
                pub metadata: MatrixGeneratorListTemplateMetadata,
                pub spec: MatrixGeneratorListTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplate {
                pub metadata: MatrixGeneratorPullRequestTemplateMetadata,
                pub spec: MatrixGeneratorPullRequestTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplate {
                pub metadata: MatrixGeneratorScmProviderTemplateMetadata,
                pub spec: MatrixGeneratorScmProviderTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplate {
                pub metadata: MatrixTemplateMetadata,
                pub spec: MatrixTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplate {
                pub metadata: MergeGeneratorClusterDecisionResourceTemplateMetadata,
                pub spec: MergeGeneratorClusterDecisionResourceTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplate {
                pub metadata: MergeGeneratorClustersTemplateMetadata,
                pub spec: MergeGeneratorClustersTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplate {
                pub metadata: MergeGeneratorGitTemplateMetadata,
                pub spec: MergeGeneratorGitTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplate {
                pub metadata: MergeGeneratorListTemplateMetadata,
                pub spec: MergeGeneratorListTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplate {
                pub metadata: MergeGeneratorPullRequestTemplateMetadata,
                pub spec: MergeGeneratorPullRequestTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplate {
                pub metadata: MergeGeneratorScmProviderTemplateMetadata,
                pub spec: MergeGeneratorScmProviderTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplate {
                pub metadata: MergeTemplateMetadata,
                pub spec: MergeTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplate {
                pub metadata: SpecGeneratorPullRequestTemplateMetadata,
                pub spec: SpecGeneratorPullRequestTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplate {
                pub metadata: SpecGeneratorScmProviderTemplateMetadata,
                pub spec: SpecGeneratorScmProviderTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplate {
                pub metadata: SpecTemplateMetadata,
                pub spec: SpecTemplateSpec,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecTemplateSpecSourceDirectoryJsonnetTla {
                pub code: bool,
                pub name: String,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorPullRequestGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorScmProviderGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorPullRequestGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorScmProviderGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorPullRequestGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGiteaTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGithubTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorScmProviderGitlabTokenRef {
                pub key: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClusterDecisionResourceValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecGeneratorClustersValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClusterDecisionResourceValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MatrixGeneratorClustersValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClusterDecisionResourceValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug)]
            #[serde(rename_all = "camelCase")]
            pub struct MergeGeneratorClustersValues {
                pub properties: std::collections::HashMap<String, String>,
            }

            impl k8s_openapi::Resource for ApplicationSet {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "argoproj.io/v1alpha1";
                const GROUP: &'static str = "argoproj.io";
                const KIND: &'static str = "ApplicationSet";
                const VERSION: &'static str = "v1alpha1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for ApplicationSet {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }
        }
    }
}
