// Generated by:
// target/debug/k8s-crds-codegen

pub mod acid_zalan_do {
    pub mod v1 {
        pub mod operator_configuration {
            #[derive(serde::Deserialize, Debug, PartialEq)]
            pub struct OperatorConfiguration {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub configuration: Configuration,
                pub status: Status,
            }

            impl k8s_openapi::Resource for OperatorConfiguration {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "acid.zalan.do/v1";
                const GROUP: &'static str = "acid.zalan.do";
                const KIND: &'static str = "OperatorConfiguration";
                const VERSION: &'static str = "v1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for OperatorConfiguration {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }

            impl serde::Serialize for OperatorConfiguration {
                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    use serde::ser::SerializeStruct;
                    let mut state = serializer.serialize_struct("OperatorConfiguration", 5)?;
                    state.serialize_field(
                        "apiVersion",
                        <Self as k8s_openapi::Resource>::API_VERSION,
                    )?;
                    state.serialize_field("kind", <Self as k8s_openapi::Resource>::KIND)?;
                    state.serialize_field("metadata", &self.metadata)?;
                    state.serialize_field("configuration", &self.configuration)?;
                    state.serialize_field("status", &self.status)?;
                    state.end()
                }
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct AwsOrGcp {
                pub additional_secret_mount: String,
                pub additional_secret_mount_path: String,
                pub aws_region: String,
                pub enable_ebs_gp3_migration: bool,
                pub enable_ebs_gp3_migration_max_size: i64,
                pub gcp_credentials: String,
                pub kube_iam_role: String,
                pub log_s3_bucket: String,
                pub wal_az_storage_account: String,
                pub wal_gs_bucket: String,
                pub wal_s3_bucket: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ClusterLabels {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Configuration {
                pub aws_or_gcp: AwsOrGcp,
                pub connection_pooler: ConnectionPooler,
                pub crd_categories: Option<Vec<String>>,
                pub debug: Debug,
                pub docker_image: String,
                pub enable_crd_registration: bool,
                /// deprecated
                pub enable_crd_validation: bool,
                pub enable_lazy_spilo_upgrade: bool,
                pub enable_pgversion_env_var: bool,
                pub enable_shm_volume: bool,
                pub enable_spilo_wal_path_compat: bool,
                pub etcd_host: String,
                pub ignore_instance_limits_annotation_key: String,
                pub kubernetes: Kubernetes,
                pub kubernetes_use_configmaps: bool,
                pub load_balancer: LoadBalancer,
                pub logging_rest_api: LoggingRestApi,
                pub logical_backup: LogicalBackup,
                pub major_version_upgrade: MajorVersionUpgrade,
                /// -1 = disabled
                pub max_instances: i64,
                /// -1 = disabled
                pub min_instances: i64,
                pub postgres_pod_resources: PostgresPodResources,
                pub repair_period: String,
                pub resync_period: String,
                pub scalyr: Scalyr,
                pub set_memory_request_to_limit: bool,
                pub sidecar_docker_images: SidecarDockerImages,
                pub sidecars: Option<Vec<SidecarsItem>>,
                pub teams_api: TeamsApi,
                pub timeouts: Timeouts,
                pub users: Users,
                pub workers: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ConnectionPooler {
                pub connection_pooler_default_cpu_limit: String,
                pub connection_pooler_default_cpu_request: String,
                pub connection_pooler_default_memory_limit: String,
                pub connection_pooler_default_memory_request: String,
                pub connection_pooler_image: String,
                pub connection_pooler_max_db_connections: i64,
                pub connection_pooler_mode: String,
                pub connection_pooler_number_of_instances: i64,
                pub connection_pooler_schema: String,
                pub connection_pooler_user: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct CustomPodAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct CustomServiceAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Debug {
                pub debug_logging: bool,
                pub enable_database_access: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct InfrastructureRolesSecretsItem {
                pub defaultrolevalue: String,
                pub defaultuservalue: String,
                pub details: String,
                pub passwordkey: String,
                pub rolekey: String,
                pub secretname: String,
                pub template: bool,
                pub userkey: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Kubernetes {
                pub additional_pod_capabilities: Vec<String>,
                pub cluster_domain: String,
                pub cluster_labels: ClusterLabels,
                pub cluster_name_label: String,
                pub custom_pod_annotations: CustomPodAnnotations,
                pub delete_annotation_date_key: String,
                pub delete_annotation_name_key: String,
                pub downscaler_annotations: Vec<String>,
                pub enable_cross_namespace_secret: bool,
                pub enable_init_containers: bool,
                pub enable_pod_antiaffinity: bool,
                pub enable_pod_disruption_budget: bool,
                pub enable_sidecars: bool,
                pub ignored_annotations: Vec<String>,
                pub infrastructure_roles_secret_name: String,
                pub infrastructure_roles_secrets: Option<Vec<InfrastructureRolesSecretsItem>>,
                pub inherited_annotations: Vec<String>,
                pub inherited_labels: Vec<String>,
                pub master_pod_move_timeout: String,
                pub node_readiness_label: NodeReadinessLabel,
                pub node_readiness_label_merge: String,
                pub oauth_token_secret_name: String,
                pub pdb_name_format: String,
                pub pod_antiaffinity_topology_key: String,
                pub pod_environment_configmap: String,
                pub pod_environment_secret: String,
                pub pod_management_policy: String,
                pub pod_priority_class_name: String,
                pub pod_role_label: String,
                pub pod_service_account_definition: String,
                pub pod_service_account_name: String,
                pub pod_service_account_role_binding_definition: String,
                pub pod_terminate_grace_period: String,
                pub secret_name_template: String,
                pub spilo_allow_privilege_escalation: bool,
                pub spilo_fsgroup: i64,
                pub spilo_privileged: bool,
                pub spilo_runasgroup: i64,
                pub spilo_runasuser: i64,
                pub storage_resize_mode: String,
                pub toleration: Toleration,
                pub watched_namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct LoadBalancer {
                pub custom_service_annotations: CustomServiceAnnotations,
                pub db_hosted_zone: String,
                pub enable_master_load_balancer: bool,
                pub enable_master_pooler_load_balancer: bool,
                pub enable_replica_load_balancer: bool,
                pub enable_replica_pooler_load_balancer: bool,
                pub external_traffic_policy: String,
                pub master_dns_name_format: String,
                pub replica_dns_name_format: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct LoggingRestApi {
                pub api_port: i64,
                pub cluster_history_entries: i64,
                pub ring_log_lines: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct LogicalBackup {
                pub logical_backup_docker_image: String,
                pub logical_backup_google_application_credentials: String,
                pub logical_backup_job_prefix: String,
                pub logical_backup_provider: String,
                pub logical_backup_s3_access_key_id: String,
                pub logical_backup_s3_bucket: String,
                pub logical_backup_s3_endpoint: String,
                pub logical_backup_s3_region: String,
                pub logical_backup_s3_retention_time: String,
                pub logical_backup_s3_secret_access_key: String,
                pub logical_backup_s3_sse: String,
                pub logical_backup_schedule: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct MajorVersionUpgrade {
                pub major_version_upgrade_mode: String,
                pub major_version_upgrade_team_allow_list: Vec<String>,
                pub minimal_major_version: String,
                pub target_major_version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct NodeReadinessLabel {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PostgresPodResources {
                pub default_cpu_limit: String,
                pub default_cpu_request: String,
                pub default_memory_limit: String,
                pub default_memory_request: String,
                pub min_cpu_limit: String,
                pub min_memory_limit: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Scalyr {
                pub scalyr_api_key: String,
                pub scalyr_cpu_limit: String,
                pub scalyr_cpu_request: String,
                pub scalyr_image: String,
                pub scalyr_memory_limit: String,
                pub scalyr_memory_request: String,
                pub scalyr_server_url: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SidecarDockerImages {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SidecarsItem {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Status {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct TeamApiRoleConfiguration {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct TeamsApi {
                pub enable_admin_role_for_users: bool,
                pub enable_postgres_team_crd: bool,
                pub enable_postgres_team_crd_superusers: bool,
                pub enable_team_member_deprecation: bool,
                pub enable_team_superuser: bool,
                pub enable_teams_api: bool,
                pub pam_configuration: String,
                pub pam_role_name: String,
                pub postgres_superuser_teams: Vec<String>,
                pub protected_role_names: Vec<String>,
                pub role_deletion_suffix: String,
                pub team_admin_role: String,
                pub team_api_role_configuration: TeamApiRoleConfiguration,
                pub teams_api_url: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Timeouts {
                pub patroni_api_check_interval: String,
                pub patroni_api_check_timeout: String,
                pub pod_deletion_wait_timeout: String,
                pub pod_label_wait_timeout: String,
                pub ready_wait_interval: String,
                pub ready_wait_timeout: String,
                pub resource_check_interval: String,
                pub resource_check_timeout: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Toleration {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Users {
                pub additional_owner_roles: Option<Vec<String>>,
                pub enable_password_rotation: bool,
                pub password_rotation_interval: i64,
                pub password_rotation_user_retention: i64,
                pub replication_username: String,
                pub super_username: String,
            }
        }
        pub mod postgres_team {
            #[derive(serde::Deserialize, Debug, PartialEq)]
            pub struct PostgresTeam {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub spec: Spec,
            }

            impl k8s_openapi::Resource for PostgresTeam {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "acid.zalan.do/v1";
                const GROUP: &'static str = "acid.zalan.do";
                const KIND: &'static str = "PostgresTeam";
                const VERSION: &'static str = "v1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for PostgresTeam {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }

            impl serde::Serialize for PostgresTeam {
                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    use serde::ser::SerializeStruct;
                    let mut state = serializer.serialize_struct("PostgresTeam", 4)?;
                    state.serialize_field(
                        "apiVersion",
                        <Self as k8s_openapi::Resource>::API_VERSION,
                    )?;
                    state.serialize_field("kind", <Self as k8s_openapi::Resource>::KIND)?;
                    state.serialize_field("metadata", &self.metadata)?;
                    state.serialize_field("spec", &self.spec)?;
                    state.end()
                }
            }

            /// Map for teamId and associated additional users
            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct AdditionalMembers {
                /// Map for teamId and associated additional users
                pub properties: std::collections::HashMap<String, Option<Vec<String>>>,
            }

            /// Map for teamId and associated additional superuser teams
            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct AdditionalSuperuserTeams {
                /// Map for teamId and associated additional superuser teams
                pub properties: std::collections::HashMap<String, Option<Vec<String>>>,
            }

            /// Map for teamId and associated additional teams
            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct AdditionalTeams {
                /// Map for teamId and associated additional teams
                pub properties: std::collections::HashMap<String, Option<Vec<String>>>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Spec {
                /// Map for teamId and associated additional users
                pub additional_members: AdditionalMembers,
                /// Map for teamId and associated additional superuser teams
                pub additional_superuser_teams: AdditionalSuperuserTeams,
                /// Map for teamId and associated additional teams
                pub additional_teams: AdditionalTeams,
            }
        }
        pub mod postgresql {
            #[derive(serde::Deserialize, Debug, PartialEq)]
            pub struct Postgresql {
                pub metadata: k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta,
                pub spec: Spec,
                pub status: Status,
            }

            impl k8s_openapi::Resource for Postgresql {
                type Scope = k8s_openapi::ClusterResourceScope;

                const API_VERSION: &'static str = "acid.zalan.do/v1";
                const GROUP: &'static str = "acid.zalan.do";
                const KIND: &'static str = "postgresql";
                const VERSION: &'static str = "v1";
                const URL_PATH_SEGMENT: &'static str = "TODO";
            }

            impl k8s_openapi::Metadata for Postgresql {
                type Ty = k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;

                fn metadata(&self) -> &<Self as k8s_openapi::Metadata>::Ty {
                    &self.metadata
                }

                fn metadata_mut(&mut self) -> &mut <Self as k8s_openapi::Metadata>::Ty {
                    &mut self.metadata
                }
            }

            impl serde::Serialize for Postgresql {
                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    use serde::ser::SerializeStruct;
                    let mut state = serializer.serialize_struct("postgresql", 5)?;
                    state.serialize_field(
                        "apiVersion",
                        <Self as k8s_openapi::Resource>::API_VERSION,
                    )?;
                    state.serialize_field("kind", <Self as k8s_openapi::Resource>::KIND)?;
                    state.serialize_field("metadata", &self.metadata)?;
                    state.serialize_field("spec", &self.spec)?;
                    state.serialize_field("status", &self.status)?;
                    state.end()
                }
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct AdditionalVolumesItem {
                pub mount_path: String,
                pub name: String,
                pub sub_path: String,
                pub target_containers: Option<Vec<String>>,
                pub volume_source: VolumeSource,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Clone {
                pub cluster: String,
                pub s3_access_key_id: String,
                pub s3_endpoint: String,
                pub s3_force_path_style: bool,
                pub s3_secret_access_key: String,
                pub s3_wal_path: String,
                pub timestamp: String,
                pub uid: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ConnectionPooler {
                pub docker_image: String,
                pub max_d_b_connections: i64,
                pub mode: String,
                pub number_of_instances: i64,
                pub resources: ConnectionPoolerResources,
                pub schema: String,
                pub user: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Databases {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct EnvItem {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Extensions {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Filter {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct InitContainersItem {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Initdb {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ConnectionPoolerResourcesLimits {
                pub cpu: String,
                pub memory: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecResourcesLimits {
                pub cpu: String,
                pub memory: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PreferenceMatchExpressionsItem {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct NodeSelectorTermsItemMatchExpressionsItem {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SelectorMatchExpressionsItem {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PreferenceMatchFieldsItem {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct NodeSelectorTermsItemMatchFieldsItem {
                pub key: String,
                pub operator: String,
                pub values: Vec<String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct MatchLabels {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct NodeAffinity {
                pub preferred_during_scheduling_ignored_during_execution:
                    Vec<PreferredDuringSchedulingIgnoredDuringExecutionItem>,
                pub required_during_scheduling_ignored_during_execution:
                    RequiredDuringSchedulingIgnoredDuringExecution,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct NodeSelectorTermsItem {
                pub match_expressions: Vec<NodeSelectorTermsItemMatchExpressionsItem>,
                pub match_fields: Vec<NodeSelectorTermsItemMatchFieldsItem>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Parameters {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Patroni {
                pub initdb: Initdb,
                pub loop_wait: i64,
                pub maximum_lag_on_failover: i64,
                pub pg_hba: Vec<String>,
                pub retry_timeout: i64,
                pub slots: Slots,
                pub synchronous_mode: bool,
                pub synchronous_mode_strict: bool,
                pub synchronous_node_count: i64,
                pub ttl: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PodAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Postgresql {
                pub parameters: Parameters,
                pub version: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Preference {
                pub match_expressions: Vec<PreferenceMatchExpressionsItem>,
                pub match_fields: Vec<PreferenceMatchFieldsItem>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PreferredDuringSchedulingIgnoredDuringExecutionItem {
                pub preference: Preference,
                pub weight: i32,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PreparedDatabases {
                pub properties: std::collections::HashMap<String, PreparedDatabasesValue>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ConnectionPoolerResourcesRequests {
                pub cpu: String,
                pub memory: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecResourcesRequests {
                pub cpu: String,
                pub memory: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct RequiredDuringSchedulingIgnoredDuringExecution {
                pub node_selector_terms: Vec<NodeSelectorTermsItem>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SpecResources {
                pub limits: SpecResourcesLimits,
                pub requests: SpecResourcesRequests,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ConnectionPoolerResources {
                pub limits: ConnectionPoolerResourcesLimits,
                pub requests: ConnectionPoolerResourcesRequests,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Schemas {
                pub properties: std::collections::HashMap<String, SchemasValue>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Selector {
                pub match_expressions: Vec<SelectorMatchExpressionsItem>,
                pub match_labels: MatchLabels,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct ServiceAnnotations {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SidecarsItem {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Slots {
                pub properties: std::collections::HashMap<String, SlotsValue>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Spec {
                pub additional_volumes: Vec<AdditionalVolumesItem>,
                pub allowed_source_ranges: Option<Vec<String>>,
                pub clone: Clone,
                pub connection_pooler: ConnectionPooler,
                pub databases: Databases,
                pub docker_image: String,
                pub enable_connection_pooler: bool,
                pub enable_logical_backup: bool,
                pub enable_master_load_balancer: bool,
                pub enable_master_pooler_load_balancer: bool,
                pub enable_replica_connection_pooler: bool,
                pub enable_replica_load_balancer: bool,
                pub enable_replica_pooler_load_balancer: bool,
                pub enable_shm_volume: bool,
                pub env: Option<Vec<EnvItem>>,
                pub init_containers: Option<Vec<InitContainersItem>>,
                pub logical_backup_schedule: String,
                pub maintenance_windows: Vec<String>,
                pub node_affinity: NodeAffinity,
                pub number_of_instances: i64,
                pub patroni: Patroni,
                pub pod_annotations: PodAnnotations,
                pub pod_priority_class_name: String,
                pub postgresql: Postgresql,
                pub prepared_databases: PreparedDatabases,
                /// deprecated
                pub replica_load_balancer: bool,
                pub resources: SpecResources,
                pub scheduler_name: String,
                pub service_annotations: ServiceAnnotations,
                pub sidecars: Option<Vec<SidecarsItem>>,
                pub spilo_f_s_group: i64,
                pub spilo_run_as_group: i64,
                pub spilo_run_as_user: i64,
                pub standby: Standby,
                pub streams: Vec<StreamsItem>,
                pub team_id: String,
                pub tls: Tls,
                pub tolerations: Vec<TolerationsItem>,
                /// deprecated
                pub use_load_balancer: bool,
                pub users: Users,
                pub users_with_in_place_secret_rotation: Option<Vec<String>>,
                pub users_with_secret_rotation: Option<Vec<String>>,
                pub volume: Volume,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Standby {
                pub gs_wal_path: String,
                pub s3_wal_path: String,
                pub standby_host: String,
                pub standby_port: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Status {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct StreamsItem {
                pub application_id: String,
                pub batch_size: i64,
                pub database: String,
                pub filter: Filter,
                pub tables: Tables,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Tables {
                pub properties: std::collections::HashMap<String, TablesValue>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Tls {
                pub ca_file: String,
                pub ca_secret_name: String,
                pub certificate_file: String,
                pub private_key_file: String,
                pub secret_name: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct TolerationsItem {
                pub effect: String,
                pub key: String,
                pub operator: String,
                pub toleration_seconds: i64,
                pub value: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Users {
                pub properties: std::collections::HashMap<String, Option<Vec<String>>>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SlotsValue {
                pub properties: std::collections::HashMap<String, String>,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct PreparedDatabasesValue {
                pub default_users: bool,
                pub extensions: Extensions,
                pub schemas: Schemas,
                pub secret_namespace: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct SchemasValue {
                pub default_roles: bool,
                pub default_users: bool,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct TablesValue {
                pub event_type: String,
                pub id_column: String,
                pub payload_column: String,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct Volume {
                pub iops: i64,
                pub selector: Selector,
                pub size: String,
                pub storage_class: String,
                pub sub_path: String,
                pub throughput: i64,
            }

            #[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
            #[serde(rename_all = "camelCase")]
            pub struct VolumeSource {
                pub properties: serde_json::Map<String, serde_json::Value>,
            }
        }
    }
}
